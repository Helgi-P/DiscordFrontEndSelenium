{"uid":"9dafa25a97ab577","name":"test_send_message_2_add_remove_reactions_and_cleanup[firefox]","fullName":"test_DiscordFrontEnd.TestDiscordMessageActions#test_send_message_2_add_remove_reactions_and_cleanup","historyId":"e0d2b6c8d385b1e323c9542257ed58b4","time":{"start":1730221344656,"stop":1730221344656,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","statusTrace":"request = <SubRequest 'driver' for <Function test_send_and_delete_message_1_with_attachment[firefox]>>\n\n    @pytest.fixture(scope=\"class\")\n    def driver(request):\n        browser = request.param if hasattr(request, 'param') else \"chrome\"\n        driver = None\n    \n        if browser == \"chrome\":\n            chrome_options = ChromeOptions()\n            chrome_options.add_argument(\"--start-maximized\")\n            chrome_options.add_argument(\"--headless\")\n            chrome_options.add_argument(\"--disable-notifications\")\n            chrome_options.add_argument(\"--disable-infobars\")\n            chrome_options.add_argument(\"--disable-extensions\")\n            chrome_options.add_argument(\"--disable-popup-blocking\")\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=chrome_options)\n    \n        elif browser == \"firefox\":\n            firefox_options = FirefoxOptions()\n>           driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=firefox_options)\n\nconftest.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/firefox/webdriver.py:71: in __init__\n    super().__init__(command_executor=executor, options=options)\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:212: in __init__\n    self.start_session(capabilities)\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f0161e862c0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 1\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"driver","time":{"start":1730221342608,"stop":1730221344588,"duration":1980},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 891, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/home/runner/work/DiscordFrontEndSelenium/DiscordFrontEndSelenium/conftest.py\", line 34, in driver\n    driver = webdriver.Firefox(service=FirefoxService(GeckoDriverManager().install()), options=firefox_options)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/firefox/webdriver.py\", line 71, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 212, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 299, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"afterStages":[],"labels":[{"name":"tag","value":"order(2)"},{"name":"tag","value":"@pytest.mark.usefixtures('setup')"},{"name":"suite","value":"test_DiscordFrontEnd"},{"name":"subSuite","value":"TestDiscordMessageActions"},{"name":"host","value":"fv-az1272-401"},{"name":"thread","value":"2180-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_DiscordFrontEnd"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'firefox'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":12,"skipped":0,"passed":0,"unknown":0,"total":13},"items":[{"uid":"1af1c5cc5638c558","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/20//#testresult/1af1c5cc5638c558","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","time":{"start":1730220267760,"stop":1730220267760,"duration":0}},{"uid":"41748a6163499f8d","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/19//#testresult/41748a6163499f8d","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","time":{"start":1730220100721,"stop":1730220100721,"duration":0}},{"uid":"e43264729f600594","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/18//#testresult/e43264729f600594","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","time":{"start":1730129790648,"stop":1730129790648,"duration":0}},{"uid":"665c79ae547c92c8","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/17//#testresult/665c79ae547c92c8","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 1","time":{"start":1730129349554,"stop":1730129349554,"duration":0}},{"uid":"41e2108752f0caeb","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/16//#testresult/41e2108752f0caeb","status":"failed","statusDetails":"AssertionError: Не удалось перейти на https://discord.com/channels/@me","time":{"start":1730129190238,"stop":1730129190238,"duration":0}},{"uid":"58e08a685633f3e5","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/8//#testresult/58e08a685633f3e5","status":"broken","statusDetails":"ValueError: Email или пароль не заданы в переменных окружения.","time":{"start":1730127108785,"stop":1730127108785,"duration":0}},{"uid":"be0020f6a8993208","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/7//#testresult/be0020f6a8993208","status":"broken","statusDetails":"ValueError: Email или пароль не заданы в переменных окружения.","time":{"start":1730124473381,"stop":1730124473381,"duration":0}},{"uid":"186f0ff1b6596758","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/6//#testresult/186f0ff1b6596758","status":"broken","statusDetails":"ValueError: Email или пароль не заданы в переменных окружения.","time":{"start":1730123858659,"stop":1730123858659,"duration":0}},{"uid":"70ff50b3f7223c10","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/6//#testresult/70ff50b3f7223c10","status":"broken","statusDetails":"ValueError: Email или пароль не заданы в переменных окружения.","time":{"start":1730123706272,"stop":1730123706272,"duration":0}},{"uid":"960dc789726c9d6","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/5//#testresult/960dc789726c9d6","status":"broken","statusDetails":"TypeError: 'NoneType' object is not iterable","time":{"start":1730123240054,"stop":1730123240054,"duration":0}},{"uid":"6f2ab5e0da3819f6","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/4//#testresult/6f2ab5e0da3819f6","status":"broken","statusDetails":"TypeError: 'NoneType' object is not iterable","time":{"start":1730122275290,"stop":1730122275290,"duration":0}},{"uid":"a90e9d5f53a57bdd","reportUrl":"https://Helgi-P.github.io/DiscordFrontEndSelenium/3//#testresult/a90e9d5f53a57bdd","status":"broken","statusDetails":"TypeError: 'NoneType' object is not iterable","time":{"start":1730122014695,"stop":1730122014695,"duration":0}}]},"tags":["order(2)","@pytest.mark.usefixtures('setup')"]},"source":"9dafa25a97ab577.json","parameterValues":["'firefox'"]}